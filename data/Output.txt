locations = 3
provisions = 5 (1 at locations 1, 2 at location 2, and 3,4,5 at location 3)
functions = 3
epoch = 2
classes = 2 (class 1: 1, 2, 3 functions class 2: 2, 3 service chain) 
type of provisions = 2 (cloud, single)
fixed cost: cloud = 0, single = 5
variable cost: cloud = 0, single = 5
elastic cost: cloud = 3, single = 0
cap on resources = 15 for all provisions

int FP[][][] = { //per packet processing cost matrix [class][function][type]
    {{1, 3}, {2, 3}, {3, 4}},
    {{1, 3}, {2, 3}, {3, 4}}
};

Traffic :
For  class 1 : {epoch1: 1, epoch2: 2}, 
For  class 2 : {epoch1: 1, epoch2: 3}

Performance constraint for class1 : 15, class 2: 15
Latency = 1; for all traffic from 1 place to another
             
OUTPUT -> Results for above input :
Printing active (0,1) provisions: 
1.0 
0.0
0.0
1.0
0.0
=> Provision 1 and 4 
Objective : 51.0

Changing input(keeping other same) :
Traffic : [Increasing traffic]
For  class 1 : {epoch1: 10, epoch2: 10}, 
For  class 2 : {epoch1: 10, epoch2: 10}

OUTPUT -> Printing active (0,1) provisions: 
1.0
1.0
0.0
1.0
1.0
=> Provision 1,2,4 and 5
Objective : 340.0
